package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.Range;

import org.firstinspires.ftc.robotcore.external.navigation.Acceleration;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;
import com.qualcomm.hardware.modernrobotics.ModernRoboticsI2cRangeSensor;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.Func;
import org.firstinspires.ftc.robotcore.external.navigation.Acceleration;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.RelicRecoveryVuMark;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackable;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackables;

import java.util.Locale;
//CAMERA DETECTOR
import com.disnodeteam.dogecv.CameraViewDisplay;
import com.disnodeteam.dogecv.DogeCV;
import com.disnodeteam.dogecv.detectors.roverrukus.GoldAlignDetector;
import com.disnodeteam.dogecv.detectors.roverrukus.SamplingOrderDetector;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

@Autonomous(name="Auto_Facing_depot")
@Disabled

public class Auto_Facing_Depot_14174 extends LinearOpMode{


    public DcMotor front_left;
    public DcMotor front_right;
    public DcMotor back_right;
    public DcMotor back_left;

    BNO055IMU imu;
    Orientation angles;
    Acceleration gravity;
    // ColorSensor colorsensor;

    //CAMERA DETECTOR
    private GoldAlignDetector detector;


    public void runOpMode() {

        telemetry.addData("Status", "Initialized");
        telemetry.update();

        front_left.setDirection(DcMotor.Direction.REVERSE);
        back_left.setDirection(DcMotor.Direction.REVERSE);
        front_right.setDirection(DcMotor.Direction.FORWARD);
        back_right.setDirection(DcMotor.Direction.FORWARD);

        //Reset Encoders
        front_left.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        back_left.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        front_right.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        back_right.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        idle();

        //Set the Run Mode For The Motors
        back_left.setMode(DcMotor.RunMode.RUN_USING_ENCODER);  //Controls the speed of the motors to be consistent even at different battery levels
        front_left.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        back_right.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        front_right.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        ////////////////////////
        //color sensor initialization
        //////////////////////////
        // colorsensor = hardwareMap.get(ColorSensor.class, "colorsensor");

        //GYRO INIT
        BNO055IMU.Parameters parameters2 = new BNO055IMU.Parameters();
        parameters2.angleUnit = BNO055IMU.AngleUnit.DEGREES;
        parameters2.accelUnit = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
        parameters2.calibrationDataFile = "BNO055IMUCalibration.json"; // see the calibration sample opmode
        parameters2.loggingEnabled = true;
        parameters2.loggingTag = "IMU";
        parameters2.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();

        imu = hardwareMap.get(BNO055IMU.class, "imu");
        imu.initialize(parameters2);

        while (opModeIsActive()) {
        /*
            double red = colorsensor.red();
            double blue = colorsensor.blue();
            double Alpha = colorsensor.alpha();
            double Hue = colorsensor.argb();

            //RGB for gold (255,255,0)
            */


        }


    }

    public void driveStraight(double duration, double power) {
        double leftSpeed; //Power to feed the motors
        double rightSpeed;
        double currentdirection;

        double target = angles.firstAngle;  //Starting direction
        double startPosition = back_right.getCurrentPosition();//Starting position


        while (back_right.getCurrentPosition() < duration + startPosition && opModeIsActive()) {  //While we have not passed out intended distance
            currentdirection = angles.firstAngle;  //Current direction

            leftSpeed = power + (angles.firstAngle - target) / 100;  //Calculate speed for each side
            rightSpeed = power - (angles.firstAngle - target) / 100;  //See Gyro Straight video for detailed explanation

            leftSpeed = Range.clip(leftSpeed, .1, 1);
            rightSpeed = Range.clip(rightSpeed, -1, 1);

            back_left.setPower(leftSpeed);
            front_left.setPower(leftSpeed);
            back_right.setPower(rightSpeed);
            front_right.setPower(rightSpeed);

            telemetry.addData("1. Back Left", back_left.getCurrentPosition());
            telemetry.addData("2. Front Left", front_left.getCurrentPosition());
            telemetry.addData("3. Back Right", back_right.getCurrentPosition());
            telemetry.addData("4. Front Right", front_right.getCurrentPosition());
            telemetry.addData("5. Distance to go", duration + startPosition - back_right.getCurrentPosition());
            telemetry.update();
        }

        back_left.setPower(0);
        front_left.setPower(0);
        back_right.setPower(0);
        front_right.setPower(0);
    }
}
